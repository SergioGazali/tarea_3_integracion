{"version":3,"sources":["useSocket.js","FlightInfo.js","ChatBox.js","App.js","reportWebVitals.js","index.js"],"names":["useChat","useState","messages","setMessages","flights","setFlights","socketRef","useRef","positions","useReducer","state","action","Object","keys","includes","payload","code","position","dispatch","useEffect","current","socketIOClient","path","emit","on","incomingMessage","flights_list","console","log","flight","type","disconnect","sendMessage","messageBody","name","message","FlightInfo","props","airline","origin","destination","plane","seats","passengers","className","map","passenger","ChatBox","nickname","i","date","Date","getDate","getMonth","getFullYear","Symbol","toPrimitive","split","App","newMessage","setNewMessage","prev_nickname","setPrevNickname","setNickname","id","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","length","Tooltip","Polyline","pathOptions","color","CircleMarker","radius","permanent","value","onChange","event","target","placeholder","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","rel","href","integrity","crossorigin","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2780536.chunk.js","sourcesContent":["import { useEffect, useReducer, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\n// CODIGO MODIFICADO, OBTENIDO DE: https://medium.com/swlh/build-a-real-time-chat-app-with-react-hooks-and-socket-io-4859c9afecb0\n\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\"; // Name of the event\nconst SOCKET_SERVER_URL = \"wss://tarea-3-websocket.2021-1.tallerdeintegracion.cl\";//flights\n\nconst useChat = () => {\n  function reducer(state, action) {\n    if (Object.keys(state).includes(action.payload.code)) {\n      return {...state, [action.payload.code]:[...state[action.payload.code], action.payload.position]}\n    } else {\n      return {...state, [action.payload.code]:[action.payload.position]}\n    }\n  }\n  //const [messages, setMessages] = useState([]); // Sent and received messages\n  const [messages, setMessages] = useState([]);\n  const [flights, setFlights] = useState([]);\n  const socketRef = useRef();\n  const [positions, setPositions] = useState({\"no_fly\": [2.2, 4.3]});\n  const [state, dispatch] = useReducer(reducer, {\"no_fly\": [1.1, 2.2]}, )\n  useEffect(() => {\n    \n    // Creates a WebSocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      path: '/flights'\n    });\n\n    socketRef.current.emit(\"FLIGHTS\");\n    \n    socketRef.current.on(\"CHAT\", (incomingMessage) => {\n      setMessages((messages) => [incomingMessage, ...messages]);\n    });\n\n    socketRef.current.on(\"FLIGHTS\", (flights_list)=>{\n      setFlights(flights_list);\n      console.log(\"FLIGHTS!!::\\n\", flights_list)\n    });\n    socketRef.current.on(\"POSITION\", (flight)=>{\n      const code = flight.code;\n      const position = flight.position;\n      /* setPositions((flight) => {\n        return {...position, [flight.code]:flight.position}\n      }); */\n      dispatch({type:'FlightPosition', payload:flight})\n    });\n    // Destroys the socket reference\n    // when the connection is closed\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, []);\n\n  // Sends a message to the server that\n  // forwards it to all users in the same room\n  const sendMessage = (messageBody, name) => {\n    socketRef.current.emit(\"CHAT\", {\n      name: name,\n      message: messageBody,\n      /* senderId: socketRef.current.id, */\n    });\n  };\n\n  return { flights, positions, state, messages, sendMessage };\n};\n\nexport default useChat;","import { useState, useEffect, useRef } from \"react\";\n\nfunction FlightInfo (props) {\n  const { code, airline, origin, destination, plane, seats, passengers } = props.flight;\n  /* console.log(\"PROPS.FLIGHT\", props.flight); */\n  return (\n    <div className=\"flightCard\">\n      <h3>Flight {code}</h3>\n      <p>{airline}</p>\n      <p>Origin: ({origin[0]}; {origin[1]})</p>\n      <p>Destination: ({destination[0]}; {destination[1]})</p>\n      <p>Plane: {plane}</p>\n      <p>Seats: {seats}</p>\n      <p>Passengers: {passengers.map((passenger)=>(<>{passenger.name} | </>))}</p>\n    </div>\n  )\n}\n\nexport default FlightInfo;\n","\nfunction ChatBox (props) {\n  const messages = props.messages;\n  const nickname = props.nickname;\n  \n  return (\n    <div className=\"chatListDiv\" >\n              <ul className=\"messages-list\">\n                {messages.map((message, i) => {\n                  const date = new Date(message.date);\n\n                  const day = date.getDate()\n                  const month = date.getMonth() + 1\n                  const year = date.getFullYear()\n                  return (\n                  <li\n                    className={message.name == nickname ? \"mine\" : \"not_mine\"}\n                    key={i}\n                  >\n                    <p className=\"messageName\">NAME: {message.name}{/* </p> */}<br /> \n                    {/* <p className=\"messageDate\"> */}DATE: {date[Symbol.toPrimitive]('string').split(\"GMT\")[0]}{/* </p> */}<br />\n                    {/* <p className=\"messageMessage\"> */}MESSAGE: {message.message}.</p><br /><br />\n                  </li>\n                )})}\n              </ul>\n            </div>\n  )\n}\n\nexport default ChatBox;","import './App.css';\nimport useChat from \"./useSocket\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { MapContainer, Marker, Tooltip, TileLayer, Polyline, CircleMarker } from 'react-leaflet'\nimport FlightInfo from './FlightInfo';\nimport ChatBox from './ChatBox';\n\nfunction App() {\n  const { flights, positions, state, messages, sendMessage } = useChat(); \n  const [newMessage, setNewMessage] = useState(\"\");\n  const [prev_nickname, setPrevNickname] = useState(\"\");\n  const [nickname, setNickname] = useState(\"\");\n\n  const handleNewNicknameChange = (event) => {\n    setPrevNickname(event.target.value);\n  };\n  const handleNewNickname = () => {\n    setNickname(prev_nickname);\n  };\n  \n  const handleNewMessageChange = (event) => {\n    setNewMessage(event.target.value);\n  };\n\n  const handleSendMessage = () => {\n    sendMessage(newMessage, nickname);\n    setNewMessage(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          ✈✈👨‍✈️La app de los Vuelos.👨‍✈️✈✈\n        </h1>\n      </header>\n        <div className=\"mainDiv\">\n          <div className=\"leftDiv\">\n          <div id=\"mapDiv\">\n              <MapContainer center={[51.505, -0.09]} zoom={1} scrollWheelZoom={false}>\n              <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n              />\n                {flights.map((flight, i) => {\n                  if (state[flight.code]) {\n                    return (\n                    <>\n                    <Marker key={i} position={state[flight.code][state[flight.code].length - 1]}>\n                      <Tooltip>\n                        {flight.code}\n                      </Tooltip>\n                    </Marker>\n                    <Polyline pathOptions={{ color: 'white' }} positions={[flight.origin, flight.destination]}>\n                      <Tooltip>\n                        {flight.code} planned path\n                      </Tooltip>\n                    </Polyline>\n                    <Polyline pathOptions={{ color: 'green' }} positions={state[flight.code]}>\n                      <Tooltip>\n                        {flight.code} real path\n                      </Tooltip>\n                    </Polyline>\n                    <CircleMarker\n                      center={flight.origin}\n                      pathOptions={{ color: 'blue' }}\n                      radius={(1 + i/4) * 7}>\n                      <Tooltip permanent>{flight.code} Origin</Tooltip>\n                    </CircleMarker>\n                    <CircleMarker\n                      center={flight.destination}\n                      pathOptions={{ color: 'red' }}\n                      radius={(1 + i/4) * 7}>\n                      <Tooltip permanent>{flight.code} Destination</Tooltip>\n                    </CircleMarker>\n                    </>\n                    )\n                  } /* else {\n                    return (<></>)\n                  } */\n                })}\n              </MapContainer>\n            </div>\n            <div id=\"infoDiv\">\n              {flights.map((flight, i) => (\n                  <FlightInfo\n                    flight={flight}\n                  />\n              ))}\n            </div>\n          </div>\n          <div className=\"chatDiv\">\n            <h3 id=\"chatTitle\">Chat</h3>\n              <p>Nickname: {nickname}</p>\n            <textarea\n              value={prev_nickname}\n              onChange={handleNewNicknameChange}\n              placeholder=\"Set nickname...\"\n              className=\"nickname-input-field\"\n            />\n            <button onClick={handleNewNickname} className=\"new-nickname-button\">\n              Set Nickname\n            </button>\n            \n            <ChatBox messages={messages} nickname={nickname} />\n            <textarea\n              value={newMessage}\n              onChange={handleNewMessageChange}\n              placeholder=\"Write message...\"\n              className=\"new-message-input-field\"\n            />\n            <button onClick={handleSendMessage} className=\"send-message-button\">\n              Send\n            </button>\n          </div>\n        </div>\n      {/* </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <>\n  <head>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css\"\n      integrity=\"sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ==\"\n      crossorigin=\"\"\n    />\n  </head>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}